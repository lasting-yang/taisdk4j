package com.taireum.CCC;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class CCC_sol_CCC extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_SHOWBALLOTMINE = "ShowBallotMine";

    public static final String FUNC_APPLYMEMBER = "applyMember";

    public static final String FUNC_ISMEMBERMINE = "isMemberMine";

    public static final String FUNC_UPDATECOMPANY = "UpdateCompany";

    public static final String FUNC_SHOWSUM = "ShowSum";

    public static final String FUNC_VOTEMINE = "VoteMine";

    public static final String FUNC_VOTEMEMBER = "VoteMember";

    public static final String FUNC_SHOWCOMPANY = "ShowCompany";

    public static final String FUNC_ISMEMBEROWNER = "isMemberOwner";

    public static final String FUNC_SHOWBALLOT = "ShowBallot";

    public static final String FUNC_ISMEMBER = "isMember";

    @Deprecated
    protected CCC_sol_CCC(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CCC_sol_CCC(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CCC_sol_CCC(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CCC_sol_CCC(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> ShowBallotMine(BigInteger _companyid) {
        final Function function = new Function(FUNC_SHOWBALLOTMINE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_companyid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> applyMember(String _companyname, String _email, String _remark, String _enode, String _account) {
        final Function function = new Function(
                FUNC_APPLYMEMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_companyname), 
                new org.web3j.abi.datatypes.Utf8String(_email), 
                new org.web3j.abi.datatypes.Utf8String(_remark), 
                new org.web3j.abi.datatypes.Utf8String(_enode), 
                new org.web3j.abi.datatypes.Address(_account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isMemberMine(BigInteger _companyid) {
        final Function function = new Function(FUNC_ISMEMBERMINE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_companyid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> UpdateCompany(BigInteger _companyid, String _email, String _remark, String _enode, BigInteger _stat) {
        final Function function = new Function(
                FUNC_UPDATECOMPANY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_companyid), 
                new org.web3j.abi.datatypes.Utf8String(_email), 
                new org.web3j.abi.datatypes.Utf8String(_remark), 
                new org.web3j.abi.datatypes.Utf8String(_enode), 
                new org.web3j.abi.datatypes.generated.Uint256(_stat)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> ShowSum() {
        final Function function = new Function(FUNC_SHOWSUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> VoteMine(BigInteger _fromcompanyid, BigInteger _tocompanyid) {
        final Function function = new Function(
                FUNC_VOTEMINE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_fromcompanyid), 
                new org.web3j.abi.datatypes.generated.Uint256(_tocompanyid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> VoteMember(BigInteger _fromcompanyid, BigInteger _tocompanyid) {
        final Function function = new Function(
                FUNC_VOTEMEMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_fromcompanyid), 
                new org.web3j.abi.datatypes.generated.Uint256(_tocompanyid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<String, String, String, String, String, BigInteger>> ShowCompany(BigInteger _companyid) {
        final Function function = new Function(FUNC_SHOWCOMPANY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_companyid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, BigInteger>>(
                new Callable<Tuple6<String, String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> isMemberOwner(String _account) {
        final Function function = new Function(FUNC_ISMEMBEROWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> ShowBallot(BigInteger _companyid) {
        final Function function = new Function(FUNC_SHOWBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_companyid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> isMember(BigInteger _companyid) {
        final Function function = new Function(FUNC_ISMEMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_companyid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static CCC_sol_CCC load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CCC_sol_CCC(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CCC_sol_CCC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CCC_sol_CCC(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CCC_sol_CCC load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CCC_sol_CCC(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CCC_sol_CCC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CCC_sol_CCC(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CCC_sol_CCC> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _companyname, String _email, String _remark, String _enode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_companyname), 
                new org.web3j.abi.datatypes.Utf8String(_email), 
                new org.web3j.abi.datatypes.Utf8String(_remark), 
                new org.web3j.abi.datatypes.Utf8String(_enode)));
        return deployRemoteCall(CCC_sol_CCC.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CCC_sol_CCC> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _companyname, String _email, String _remark, String _enode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_companyname), 
                new org.web3j.abi.datatypes.Utf8String(_email), 
                new org.web3j.abi.datatypes.Utf8String(_remark), 
                new org.web3j.abi.datatypes.Utf8String(_enode)));
        return deployRemoteCall(CCC_sol_CCC.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CCC_sol_CCC> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _companyname, String _email, String _remark, String _enode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_companyname), 
                new org.web3j.abi.datatypes.Utf8String(_email), 
                new org.web3j.abi.datatypes.Utf8String(_remark), 
                new org.web3j.abi.datatypes.Utf8String(_enode)));
        return deployRemoteCall(CCC_sol_CCC.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CCC_sol_CCC> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _companyname, String _email, String _remark, String _enode) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_companyname), 
                new org.web3j.abi.datatypes.Utf8String(_email), 
                new org.web3j.abi.datatypes.Utf8String(_remark), 
                new org.web3j.abi.datatypes.Utf8String(_enode)));
        return deployRemoteCall(CCC_sol_CCC.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
